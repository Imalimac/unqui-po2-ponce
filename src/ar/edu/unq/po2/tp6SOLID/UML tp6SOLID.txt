@startuml
Banco --  Cliente
Banco --  Credito
Banco ..|> SolicitarCredito
ServidorPop ..|> IServidor

Credito <|-- CreditoHipotecario
Credito <|-- CreditoPersonal

Cliente -- PropiedadInmobiliaria
Cliente --  ClienteEMail
ServidorPop -- Correo



 Class Cliente {
- nombre: String. 
- edad: Integer.
- sueldoNetoMensual: double.
- sueldoNetoAnual: double.

+ void solicitarCredito(Banco bancoAcreedor, Credito creditoASolicitar, Integer montoDelCredito).
+ getNombre(): String. 
+ getEdad(): Integer.
+ getSueldoNetoAnual(): double.
+ getSueldoNetoMensual(): double.

}

class ClienteEMail {
	
+ ServidorPop servidor;
+ nombreUsuario: String. 
+ passusuario: String.
+ inbox: ArrayList<Correo>.
- borrados: ArrayList<Correo>.
	
+ ClienteEMail(ServidorPop servidor, String nombreUsuario, String pass)
+ getServidor(): ServidorPop.  
+ getNombreUsuario(): String.
+ getPassusuario(): String.
+ getInbox(): ArrayList<Correo>.
+ setInbox(ArrayList<Correo> inbox): void.
+ getBorrados(): ArrayList<Correo>.
+ conectar(): void.
+ borrarCorreo(Correo correo): void.
+ contarBorrados(): int. 
+ contarInbox(): int.
+ eliminarBorrado(Correo correo): void.
+ recibirNuevos(): void.
+ enviarCorreo(String asunto, String destinatario, String cuerpo): void.

}

interface IServidor {
+ recibirNuevos(String user, String pass): ArrayList<Correo>.
+ conectar(String nombreUsuario, String passusuario): void.
+ enviar(Correo correo: void.
+ tazaDeTransferencia(): float. 
+ resetear(): void.
+ realizarBackUp(): void.

}

class ServidorPop {
+ listaClienteDeMail: ArrayList<ClienteEMail>().
- clienteConectado: ClienteEMail. 
	
- ServidorPop() {
+ getListaClienteDeMail(): ArrayList<ClienteEMail>.
+ agregarClienteDeMail(ClienteEMail clienteAAgregar): void.
+ recibirNuevos(String user, String pass): ArrayList <Correo>. 
+ conectar(String nombreUsuario, String passusuario): void.
+ enviar(Correo correo): void.
+ tazaDeTransferencia(): float.
+ resetear(): void.
+ realizarBackUp(): void.

}

class Correo {
+ asunto: String.
+ destinatario: String.
+ cuerpo: String.
	
+ Correo(String asunto, String destinatario, String cuerpo).
+ getDestinatario(): String.
	
}


Class Banco {
	- capitalDelBanco: double.
    - listaDeClientes: ArrayList<Cliente>().
    - listaDeCreditosOtorgados: ArrayList<Credito>().
    - listaDeSolicitudesDeCreditos: ArrayList<Credito>().
 
    + Banco(double capitalDelBanco).
    + getCapitalDelBanco(): double.
    + setCapitalDelBanco(double capitalDelBanco): void.
    + agregarCliente(Cliente cliente): void.
    + getListaDeClientes(): ArrayList<Cliente>.
 	+ agregarCreditoOtorgado(Credito credito): void.
 	+ getListaDeCreditosOtorgados():  ArrayList<Credito>.
 	+ registrarSolicitudDeCredito(Credito creditoASolicitar): void.
 	+ getListaDeSolicitudesDeCreditos(): ArrayList<Credito>.
 	+ evaluarTodasLasSolicitudesPendientes(ArrayList<Credito> listaDeSolicitudesPendientes): void.
 	+ evaluarSolicitudDeCredito(Credito creditoSolicitado): void.
 	+ otorgarCredito(Credito creditoOtorgado): void.
 	+ denegarCredito(Credito creditoDenegado): void.
 	+ informarAlClienteCreditoDenegado(): String.
}

Interface SolicitarCredito {
    + registrarSolicitudDeCredito(Credito creditoASolicitar): void. 
    + evaluarSolicitudDeCredito(Credito creditoASolicitar): void.
    + otorgarCredito(Credito creditoAOtorgar): void.
    + denegarCredito(Credito creditoADenegar): void.
}

Abstract Class Credito {
    + Cliente cliente;
    + double montoSolicitado;
    + Integer plazoEnMeses;

    + Credito(Cliente cliente, double montoSolicitado, Integer plazoEnMeses)
    + getCliente(): Cliente.
    + setCliente(Cliente): void.
    + getMontoSolicitado(): double.
    + setMontoSOlicitado(double montoSolicitado): void.
    + getPlazoEnMeses(): Integer.
    +setPlazoEnMeses(Integer PlazoEnMeses): void.
    + montoCuotaMensual(): double.
    abstract esAceptable(): boolean.
    abstract montoTopeDeCuota(): double.
}

Class CreditoPersonal {
        
    + CreditoPersonal(Cliente cliente, double montoSolicitado, Integer plazoEnMeses)
    + esAceptable(): boolean.
    + montoTopeDeCuota(): double.
}

Class CreditoHipotecario{
    + propiedadInmobiliaria: PropiedadInmobiliaria.
    
    + CreditoHipotecario(Cliente cliente, double montoSolicitado, Integer plazoEnMeses,PropiedadInmobiliaria PropiedadInmobiliaria )
    + esAceptable(): boolean.
    + noSuperaTopeDeValorFiscalDeGarantia(): boolean.
    + montoTopeDeCuota(): double.
    + clienteNoSuperaEdadTope(): boolean.
    + plazoDeCreditoEnAÃ±os(): Integer.
}

Class PropiedadInmobiliaria{
    + direccion: String.
    + descripcionDeLaPropiedad: String.
    + valorFiscalDelInmueble: double.

    + PropiedadInmobiliaria(String direccion, String descripcionDeLaPropiedad, double valorFiscarDelInmueble)
    + getValorFiscalDelInmueble(): double.
    + getDireccion(): String.
    + getDescripcionDeLaPropiedad(): String.
}
@enduml